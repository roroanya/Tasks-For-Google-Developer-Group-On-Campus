# -*- coding: utf-8 -*-
"""Group 12 - Raden Roro Anindya - Homework - Data Prep.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sydPIcQVzRmJGWAggQy4v6ITK7zjDrQU

This assignmment is based on 4th class ( EDA and Data Preparation ) and 5th Class ( Feature Engineering)

##before do your assignment, please make sure to **make a copy** on it
"""

import pandas as pd
import seaborn as sns
import numpy as np
import matplotlib.pyplot as plt
df = sns.load_dataset('planets')
df.head(5)

df.describe() # cek statistik

df.info() #cek data type

"""##1. Berdasarkan data describe diatas, manakah feature yang termasuk ke distribusi yang tidak normal?

Jawab : orbital_period, mass dan distance

##2. Tampilkan lah nilai NULL dan NaN dan Jumlahkan ada berapa per masing masing feature
"""

missing_df = pd.DataFrame({
    'Feature': df.columns,
    'Jumlah NaN': df.isna().sum(),
    'Persentase (%)': (df.isna().sum() / len(df)) * 100
})

missing_df = missing_df[missing_df['Jumlah NaN'] > 0].reset_index(drop=True)

print(missing_df)

"""##3. Buatlah visualisasi data yang memiliki distribusi tidak normal dan data yang memiliki outlier menggunakan matplotlib.boxplot"""

df = sns.load_dataset('planets')

numerical_features = df.select_dtypes(include=[np.number])

plt.figure(figsize=(12, 6))
for i, col in enumerate(numerical_features.columns, 1):
    plt.subplot(2, 3, i)
    plt.boxplot(df[col].dropna(), vert=False)
    plt.title(f'Boxplot {col}')

plt.tight_layout()
plt.show()

"""##4. Coba encoding data kategorik pada feature 'method' dengan metode apa saja dan berikan alasan mu kenapa pakai metode itu

"""

# Load dataset
df = sns.load_dataset('planets')

missing_df = pd.DataFrame({
    'Feature': df.columns,
    'Jumlah NaN': df.isna().sum(),
    'Persentase (%)': (df.isna().sum() / len(df)) * 100
})
missing_df = missing_df[missing_df['Jumlah NaN'] > 0].reset_index(drop=True)
print("Jumlah Nilai NaN per Fitur:")
print(missing_df)

numerical_features = df.select_dtypes(include=['number']).columns

plt.figure(figsize=(12, 6))
for i, feature in enumerate(numerical_features):
    plt.subplot(2, 3, i + 1)
    sns.boxplot(x=df[feature])
    plt.title(f"Boxplot {feature}")

plt.tight_layout()
plt.show()

df['method_encoded'] = df['method'].astype('category').cat.codes
print("\nData setelah encoding fitur 'method':")
print(df[['method', 'method_encoded']].head())

"""##5. Tampilkan nilai NULL ( nilai yang hilang) dan bagaimana cara mu untuk

*   List item

*   List item
*   List item


*   List item

handling NULL Values.
"""

missing_df = pd.DataFrame({
    'Feature': df.columns,
    'Jumlah NaN': df.isna().sum(),
    'Persentase (%)': (df.isna().sum() / len(df)) * 100
})
missing_df = missing_df[missing_df['Jumlah NaN'] > 0].reset_index(drop=True)

print("Jumlah Nilai NaN per Fitur:")
print(missing_df)

df_handled = df.copy()

num_features = df_handled.select_dtypes(include=['number']).columns
df_handled[num_features] = df_handled[num_features].fillna(df_handled[num_features].median())

cat_features = df_handled.select_dtypes(include=['object']).columns
df_handled[cat_features] = df_handled[cat_features].fillna(df_handled[cat_features].mode().iloc[0])

threshold = len(df) * 0.5
df_handled = df_handled.dropna(thresh=threshold, axis=1)

print("\nDataset setelah handling missing values:")
print(df_handled.isna().sum())

"""##6. Scaling feature numerik 'number','orbital_period','mass','distance','year' dengan salah satu metode ini ( Simple feature scaling, MinMax Scaling, StandardScaler, Robust Scaler ), dan berikan alasannya"""

from sklearn.preprocessing import MinMaxScaler

num_features = ['number', 'orbital_period', 'mass', 'distance', 'year']

scaler = MinMaxScaler()

df_scaled = df.copy()
df_scaled[num_features] = scaler.fit_transform(df[num_features])

print("Data setelah MinMax Scaling:")
print(df_scaled.head())

"""##7. Tentukan target yang ingin di prediksi dan feature nya, lalu buat lah train and test."""

from sklearn.model_selection import train_test_split

target = 'mass'
features = ['number', 'orbital_period', 'distance', 'year', 'method_encoded']

X = df[features]
y = df[target]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

print("Jumlah data train:", len(X_train))
print("Jumlah data test:", len(X_test))